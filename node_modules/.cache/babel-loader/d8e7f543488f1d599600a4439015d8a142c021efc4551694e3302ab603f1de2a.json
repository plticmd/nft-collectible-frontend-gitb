{"ast":null,"code":"var _jsxFileName = \"/Users/007/DEV/Unchain/Polygon-Generative-NFT/Polygon-Generative-NFT/nft-collectible-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x9068484a45DE3e31d785302Ac8AFe2eFeb50b815\";\nconst abi = contract.abi;\nfunction App() {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      alert(\"Please install MetaMask!\");\n    }\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\")\n        });\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Scrappy Squirrels Tutorial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentAccount ? mintNftButton() : connectWalletButton()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","contract","ethers","contractAddress","abi","App","currentAccount","setCurrentAccount","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWalletHandler","alert","err","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","nftTxn","mintNFTs","value","utils","parseEther","wait","hash","connectWalletButton","mintNftButton"],"sources":["/Users/007/DEV/Unchain/Polygon-Generative-NFT/Polygon-Generative-NFT/nft-collectible-frontend/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\n\nconst contractAddress =\n  \"0x9068484a45DE3e31d785302Ac8AFe2eFeb50b815\";\nconst abi = contract.abi;\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWalletHandler = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      alert(\"Please install MetaMask!\");\n  }\n\n    try {\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\", });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        \n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\"),\n        });\n        \n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return (\n      <button\n        onClick={connectWalletHandler}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Connect Wallet\n      </button>\n    );\n  };\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className=\"cta-button mint-nft-button\">\n        Mint NFT\n      </button>\n    );\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"main-app\">\n      <h1>Scrappy Squirrels Tutorial</h1>\n      <div>{currentAccount ? mintNftButton() : connectWalletButton()}</div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}